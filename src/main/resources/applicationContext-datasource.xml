<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       	http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<!-- c3p0数据源 -->
	<bean id="parentDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${datasource.driverClassName}" />
		<!--连接池中保留的最小连接数。-->
		<property name="minPoolSize" value="${datasource.initialSize}" />
		<!--连接池中保留的最大连接数。 -->
		<property name="maxPoolSize" value="${datasource.maxActive}" />
		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="${datasource.initialSize}" />
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="${datasource.maxIdle}" />
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="${datasource.acquireIncrement}" />
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="${datasource.idleConnectionTestPeriod}" />
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts" value="${datasource.acquireRetryAttempts}" />
		<!--
			获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效
			保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false
		-->
		<property name="breakAfterAcquireFailure" value="true" />
		<!--
			因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的
			时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable
			等方法来提升连接测试的性能。Default: false
		-->
		<property name="testConnectionOnCheckout" value="false" />
	</bean>

	<!--Begin define User datasource-->
	<bean id="userDS" parent="parentDataSource">
		<property name="jdbcUrl"
			value="jdbc:mysql://${datasource.userUrlHost}/${datasource.userDBName}?zeroDateTimeBehavior=convertToNull&amp;autoReconnect=true&amp;userUnicode=true&amp;characterEncoding=UTF-8" />
		<property name="user" value="${datasource.user}" />
		<property name="password" value="${datasource.password}" />
	</bean>
	<!--End define User datasource-->

	<!-- 配置sessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="userDS" />
		<property name="packagesToScan" value="cn.jiuling.distributedmanagement.model" />

		<!--hibernateProperties -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
				<prop key="hibernate.show_sql">${show_sql}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hbm2ddl.auto}</prop>
				<prop key="hibernate.cache.provider_class">${cache.provider_class}</prop>
				<prop key="hibernate.cache.use_second_level_cache">${cache.use_second_level_cache}</prop>
				<prop key="hibernate.cache.use_query_cache">${cache.use_query_cache}</prop>
			</props>
		</property>
	</bean>
	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	<!-- 配置事务的传播特性 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
				<tx:method name="load*" read-only="true"/> 
				<tx:method name="get*" read-only="true"/> 
				<tx:method name="list*" read-only="true"/>
				<tx:method name="find*" read-only="true"/> 
				<tx:method name="view*" read-only="true"/> 
				<tx:method name="show*" read-only="true"/>
			<tx:method name="add*" propagation="REQUIRED"  />
			<tx:method name="create*" propagation="REQUIRED"  />
			<tx:method name="save*" propagation="REQUIRED"  />
			<tx:method name="update*" propagation="REQUIRED"  />
			<tx:method name="del*" propagation="REQUIRED"  />
			<tx:method name="enable*" propagation="REQUIRED"  />
			<tx:method name="disable*" propagation="REQUIRED"  />
		</tx:attributes>
	</tx:advice>

	<!-- 那些类的哪些方法参与事务 -->
	<aop:config>
		<aop:pointcut id="allManagerMethod" expression="execution(* cn.jiuling.distributedmanagement.service.*.*(..))" />
		<aop:advisor pointcut-ref="allManagerMethod" advice-ref="txAdvice" />
	</aop:config>
</beans>